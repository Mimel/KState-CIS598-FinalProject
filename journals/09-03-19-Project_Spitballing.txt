Programming language design is an interesting area of computer science, and one that I would like to explore in my final project. There's something fascinating in using a programming language to create another programming language, something that I cannot quite articulate. All commonly-used programming languages out there share a similarity - a clearly defined purpose. Given certain circumstances, any such programming language can shine above all others.
What purpose would my new language be? There are already so many programming languages out there, all of them filling their own role - finding another purpose would be difficult. A need that I've perhaps found lies in the problems I've dealt with using other languages. There is one issue that I've run across several times in my years of programming, and that is the representation of multidimensional data structures. There may be programming languages out there that fill this niche, but of all the ones that I've used (with the exception of MATLAB), interacting with 2D or 3D arrays have sometimes been painful. Given a two-dimensional array, extracting a column (or row, depending on orientation) may be easy, but extracting the opposite is an inelegant affair. Other operations like chunk replacement and handling large, sparse arrays can be difficult as well.
I would like to create a programming language centered on the storage, manipulation, and retrieval of large chunks of data, in any of its forms. How the language will be created is going to require a large amount of planning, documentation, and consultation. This may be overambitious, and I am not sure if such an endeavor can even be done given the time frame - this project is due this December, after all. Despite this, I am excited to dive into the science of programming language design, and all that it entails.
